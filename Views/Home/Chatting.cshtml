@{
    // View
    View = this;

    // Check action result
    if (chatting.ActionResult is EmptyResult) // Terminate page
        return;

    // Layout
    Layout = chatting.UseLayout ? "_Layout" : "";
}
@chatting.ShowMessages()
<div id="chatbot">
    <div id="chat-display"></div>
    <div id="input-container">
        <input type="text" id="user-input" placeholder="Ask me anything..." />
        <button id="send-btn">Send</button>
    </div>
</div>

<script>
const apiUrl = "/api/chatbot/ask";

document.getElementById("send-btn").addEventListener("click", async () => {
    const userInput = document.getElementById("user-input").value;

    if (!userInput) {
        alert("Please enter a question!");
        return;
    }

    const chatDisplay = document.getElementById("chat-display");

    chatDisplay.innerHTML += `
        <div class="chat-bubble user">
            ${userInput}
        </div>
    `;
    document.getElementById("user-input").value = "";
    chatDisplay.scrollTop = chatDisplay.scrollHeight;

    const typingBubble = document.createElement("div");
    typingBubble.className = "chat-bubble bot typing";
    typingBubble.innerText = "Typing...";
    chatDisplay.appendChild(typingBubble);
    chatDisplay.scrollTop = chatDisplay.scrollHeight;

    try {
        await new Promise(resolve => setTimeout(resolve, 600));

        const response = await fetch(`${apiUrl}?question=${encodeURIComponent(userInput)}`);
        let botReply = "Sorry, I couldn't find an answer.";

        if (response.ok) {
            const data = await response.json();
            if (data.success) {
                botReply = data.data.answer;
            } else {
                botReply = data.errorMessage || "I don't have an answer to that question yet!";
            }
        } else {
            botReply = "Error: Unable to fetch the answer.";
        }

        typingBubble.remove();

        chatDisplay.innerHTML += `
            <div class="chat-bubble bot">
                ${botReply}
            </div>
        `;
        chatDisplay.scrollTop = chatDisplay.scrollHeight;
    } catch (error) {
        console.error("Error:", error);
        alert("An error occurred while fetching the answer.");

        typingBubble.remove();
    }
});
</script>

<style>
#chatbot {
    width: 600px;
    margin: 20px auto;
    border: 1px solid #ccc;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}
[data-bs-theme="light"] #chatbot {
    background-color: #ffffff;
    color: #000000;
}
[data-bs-theme="dark"] #chatbot {
    background-color: #333333;
    color: #ffffff;
}
#chat-display {
    flex-grow: 1;
    padding: 10px;
    background-color: inherit;
    color: inherit;
    overflow-y: auto;
    height: 400px;
    border-bottom: 1px solid #ccc;
}
#input-container {
    display: flex;
    padding: 10px;
    gap: 10px;
    background-color: inherit;
    color: inherit;
}
#user-input {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
    background-color: inherit;
    color: inherit;
}
#send-btn {
    padding: 10px 20px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
}
#send-btn:hover {
    background-color: #0056b3;
}
.chat-bubble {
    max-width: 100%;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 15px;
    font-size: 14px;
    word-wrap: break-word;
}
.chat-bubble.user {
    background-color: #007BFF;
    color: white;
    align-self: flex-end;
    border-bottom-right-radius: 0;
}
.chat-bubble.bot {
    background-color: #f1f1f1;
    color: #333;
    align-self: flex-start;
    border-bottom-left-radius: 0;
}
.chat-bubble.typing {
    font-style: italic;
    opacity: 0.6;
}
</style>

@Html.Raw(GetDebugMessage())
